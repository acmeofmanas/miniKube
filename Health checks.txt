Containers have Readiness probes
If you don't set the readiness probe, the kubelet assumes that the app is ready to receive traffic as soon as the container starts. note that there's no default value for readiness and liveness.
Containers crash when there's a fatal error
If the application reaches an unrecoverable error, you should let it crash.

Examples of such unrecoverable errors are:

an uncaught exception
a typo in the code (for dynamic languages)
unable to load a header or dependency
Please note that you should not signal a failing Liveness probe.

Instead, you should immediately exit the process and let the kubelet restart the container.
Configure a passive Liveness probe
The Liveness probe is designed to restart your container when it's stuck.

Consider the following scenario: if your application is processing an infinite loop, there's no way to exit or ask for help.

When the process is consuming 100% CPU, it won't have time to reply to the (other) Readiness probe checks, and it will be eventually removed from the Service.

However, the Pod is still registered as an active replica for the current Deployment.

If you don't have a Liveness probe, it stays Running but detached from the Service.

In other words, not only is the process not serving any requests, but it is also consuming resources.

What should you do?

Expose an endpoint from your app
The endpoint always replies with a success response
Consume the endpoint from the Liveness probe
Please note that you should not use the Liveness probe to handle fatal errors in your app and request Kubernetes to restart the app.

Instead, you should let the app crash.

The Liveness probe should be used as a recovery mechanism only in case the process is not responsive.
Liveness probes values aren't the same as the Readiness
When Liveness and Readiness probes are pointing to the same endpoint, the effects of the probes are combined.

When the app signals that it's not ready or live, the kubelet detaches the container from the Service and delete it at the same time.

You might notice dropping connections because the container does not have enough time to drain the current connections or process the incoming ones.

You can dig deeper in the following article that discussed graceful shutdown.